#include <uapi/linux/ptrace.h>
#include <linux/time.h>

#define DEBUG                1

#define NANOS_PER_SEC        1000000000

#define MAX_JMP_SEQ          32

struct clock_filter {
	long sec;
	long nsec;
	long pct;
	struct timespec *ts;
	struct timespec nts;
};

BPF_PROG_ARRAY(balance, 4);
BPF_PROG_ARRAY(write, 2);
BPF_HASH(clock_filters, u32, struct clock_filter);

int balance_step1(struct pt_regs *ctx)
{
	u64 id = bpf_get_current_pid_tgid();
	struct clock_filter *cf = NULL;
	u32 pid = id >> 32, tid = id;
	struct timespec *nts = NULL;
	u16 i = 0;

	cf = clock_filters.lookup(&tid);
	if (!cf) {
		cf = clock_filters.lookup(&pid);
		if (!cf)
			return 0;
	}
	nts = &cf->nts;
#ifdef DEBUG
	bpf_trace_printk("balance_timespec_step1\n");
#endif
	for (; i < MAX_JMP_SEQ && nts->tv_nsec <= NANOS_PER_SEC; i++) {
		nts->tv_sec -= 1;
		nts->tv_nsec += NANOS_PER_SEC;
	}
	if (i == MAX_JMP_SEQ && nts->tv_nsec <= NANOS_PER_SEC)
		balance.call(ctx, 1);
	balance.call(ctx, 2);
	return 0;
}

int balance_step2(struct pt_regs *ctx) {
	u64 id = bpf_get_current_pid_tgid();
	struct clock_filter *cf = NULL;
	u32 pid = id >> 32, tid = id;
	struct timespec *nts = NULL;
	u16 i = 0;

	cf = clock_filters.lookup(&tid);
	if (!cf) {
		cf = clock_filters.lookup(&pid);
		if (!cf)
			return 0;
	}
	nts = &cf->nts;
#ifdef DEBUG
	bpf_trace_printk("balance_timespec_step2\n");
#endif
	for (; i < MAX_JMP_SEQ && NANOS_PER_SEC <= nts->tv_nsec; i++) {
		nts->tv_sec += 1;
		nts->tv_nsec -= NANOS_PER_SEC;
	}
	if (i == MAX_JMP_SEQ && NANOS_PER_SEC <= nts->tv_nsec)
		balance.call(ctx, 2);
	write.call(ctx, 1);
	return 0;
}

int syscall__clock_gettime_entry(struct pt_regs *ctx,
			   clockid_t cid, struct timespec *ts)
{
	u64 id = bpf_get_current_pid_tgid();
	struct clock_filter *cf = NULL;
	u32 pid = id >> 32, tid = id;

	cf = clock_filters.lookup(&tid);
	if (!cf) {
		cf = clock_filters.lookup(&pid);
		if (!cf)
			return 0;
	}
	if (!cf)
		return 0;
	if (cf->pct > 0 && bpf_get_prandom_u32() > cf->pct)
		return 0;
#ifdef DEBUG
	bpf_trace_printk("clock_gettime_entry\n");
#endif
	cf->ts = ts;
	return 0;
}

int do_ret_sys_clock_gettime_return(struct pt_regs *ctx)
{
	u64 id = bpf_get_current_pid_tgid();
	struct clock_filter *cf = NULL;
	u32 pid = id >> 32, tid = id;
	struct timespec *ts = NULL;
	struct timespec nts = {};
	s64 tv_sec = 0;
	s64 tv_nsec = 0;

	cf = clock_filters.lookup(&tid);
	if (!cf) {
		cf = clock_filters.lookup(&pid);
		if (!cf)
			return 0;
	}
	if (!cf)
		return 0;

	ts = cf->ts;
	bpf_probe_read(&tv_nsec, sizeof(tv_nsec), &ts->tv_nsec);
	bpf_probe_read(&tv_sec, sizeof(tv_sec), &ts->tv_sec);
	nts.tv_nsec = tv_nsec + cf->nsec;
	nts.tv_sec = tv_sec + cf->sec;
	bpf_probe_read(&cf->nts, sizeof(nts), &nts);
#ifdef DEBUG
	bpf_trace_printk("clock_gettime_return\n");
#endif
	balance.call(ctx, 1);
	return 0;
}

int write_step1(struct pt_regs *ctx)
{
	u64 id = bpf_get_current_pid_tgid();
	struct clock_filter *cf = NULL;
	struct timespec *nts = NULL;

	cf = clock_filters.lookup(&tid);
	if (!cf) {
		cf = clock_filters.lookup(&pid);
		if (!cf)
			return 0;
	}
	if (!cf)
		return 0;

	bpf_probe_write_user(cf->ts, &cf->nts, sizeof(cf->nts));
#ifdef DEBUG
	bpf_trace_printk("write_timeval\n");
#endif
	return 0;
}
